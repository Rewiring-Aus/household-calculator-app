/* tslint:disable */
/* eslint-disable */
/**
 * Household savings
 * This is the API for a household savings model. You can provide details about a household\'s energy use, and receive information about the household\'s potential emissions & cost savings from electrifying their fossil fuel machines, as well as the upfront costs of switching.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface EmissionsValues
 */
export interface EmissionsValues {
    /**
     * The household's emissions per week before electrification in kg CO2e to 2 dp.
     * @type {number}
     * @memberof EmissionsValues
     */
    before?: number;
    /**
     * The household's emissions per week after electrification in kg CO2e to 2 dp.
     * @type {number}
     * @memberof EmissionsValues
     */
    after?: number;
    /**
     * The difference in emissions before & after electrification, in kg CO2e to 2 dp.
     * @type {number}
     * @memberof EmissionsValues
     */
    difference?: number;
}

/**
 * Check if a given object implements the EmissionsValues interface.
 */
export function instanceOfEmissionsValues(value: object): value is EmissionsValues {
    return true;
}

export function EmissionsValuesFromJSON(json: any): EmissionsValues {
    return EmissionsValuesFromJSONTyped(json, false);
}

export function EmissionsValuesFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmissionsValues {
    if (json == null) {
        return json;
    }
    return {
        
        'before': json['before'] == null ? undefined : json['before'],
        'after': json['after'] == null ? undefined : json['after'],
        'difference': json['difference'] == null ? undefined : json['difference'],
    };
}

export function EmissionsValuesToJSON(json: any): EmissionsValues {
    return EmissionsValuesToJSONTyped(json, false);
}

export function EmissionsValuesToJSONTyped(value?: EmissionsValues | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'before': value['before'],
        'after': value['after'],
        'difference': value['difference'],
    };
}

