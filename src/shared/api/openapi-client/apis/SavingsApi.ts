/* tslint:disable */
/* eslint-disable */
/**
 * Household savings
 * This is the API for a household savings model. You can provide details about a household\'s energy use, and receive information about the household\'s potential emissions & cost savings from electrifying their fossil fuel machines, as well as the upfront costs of switching.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Household,
  Savings,
} from '../models/index';
import {
    HouseholdFromJSON,
    HouseholdToJSON,
    SavingsFromJSON,
    SavingsToJSON,
} from '../models/index';

export interface CalculateSavingsRequest {
    household: Household;
}

/**
 * 
 */
export class SavingsApi extends runtime.BaseAPI {

    /**
     * Calculate the emissions savings, opex savings, and the upfront cost from electrifying a given household.
     * Calculate savings & get upfront cost
     */
    async calculateSavingsRaw(requestParameters: CalculateSavingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Savings>> {
        if (requestParameters['household'] == null) {
            throw new runtime.RequiredError(
                'household',
                'Required parameter "household" was null or undefined when calling calculateSavings().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/savings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HouseholdToJSON(requestParameters['household']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SavingsFromJSON(jsonValue));
    }

    /**
     * Calculate the emissions savings, opex savings, and the upfront cost from electrifying a given household.
     * Calculate savings & get upfront cost
     */
    async calculateSavings(requestParameters: CalculateSavingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Savings> {
        const response = await this.calculateSavingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
