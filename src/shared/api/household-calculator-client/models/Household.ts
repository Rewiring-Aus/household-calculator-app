/* tslint:disable */
/* eslint-disable */
/**
 * Household savings
 * This is the API for a household savings model. You can provide details about a household\'s energy use, and receive information about the household\'s potential emissions & cost savings from electrifying their fossil fuel machines, as well as the upfront costs of switching.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Vehicle } from './Vehicle';
import {
    VehicleFromJSON,
    VehicleFromJSONTyped,
    VehicleToJSON,
} from './Vehicle';
import type { Solar } from './Solar';
import {
    SolarFromJSON,
    SolarFromJSONTyped,
    SolarToJSON,
} from './Solar';
import type { Battery } from './Battery';
import {
    BatteryFromJSON,
    BatteryFromJSONTyped,
    BatteryToJSON,
} from './Battery';

/**
 * 
 * @export
 * @interface Household
 */
export interface Household {
    /**
     * Where the household is located
     * @type {string}
     * @memberof Household
     */
    location?: HouseholdLocationEnum;
    /**
     * Number of occupants
     * @type {number}
     * @memberof Household
     */
    occupancy?: number;
    /**
     * The main method of space heating
     * @type {string}
     * @memberof Household
     */
    spaceHeating?: HouseholdSpaceHeatingEnum;
    /**
     * The method of water heating
     * @type {string}
     * @memberof Household
     */
    waterHeating?: HouseholdWaterHeatingEnum;
    /**
     * The main energy source for cooking
     * @type {string}
     * @memberof Household
     */
    cooktop?: HouseholdCooktopEnum;
    /**
     * 
     * @type {Array<Vehicle>}
     * @memberof Household
     */
    vehicles?: Array<Vehicle>;
    /**
     * 
     * @type {Solar}
     * @memberof Household
     */
    solar?: Solar;
    /**
     * 
     * @type {Battery}
     * @memberof Household
     */
    battery?: Battery;
}


/**
 * @export
 */
export const HouseholdLocationEnum = {
    Northland: 'NORTHLAND',
    AucklandNorth: 'AUCKLAND_NORTH',
    AucklandCentral: 'AUCKLAND_CENTRAL',
    AucklandEast: 'AUCKLAND_EAST',
    AucklandWest: 'AUCKLAND_WEST',
    AucklandSouth: 'AUCKLAND_SOUTH',
    Waikato: 'WAIKATO',
    BayOfPlenty: 'BAY_OF_PLENTY',
    Gisborne: 'GISBORNE',
    HawkesBay: 'HAWKES_BAY',
    Taranaki: 'TARANAKI',
    ManawatuWanganui: 'MANAWATU_WANGANUI',
    Wellington: 'WELLINGTON',
    Tasman: 'TASMAN',
    Nelson: 'NELSON',
    Marlborough: 'MARLBOROUGH',
    WestCoast: 'WEST_COAST',
    Canterbury: 'CANTERBURY',
    Otago: 'OTAGO',
    Southland: 'SOUTHLAND',
    StewartIsland: 'STEWART_ISLAND',
    ChathamIslands: 'CHATHAM_ISLANDS',
    GreatBarrierIsland: 'GREAT_BARRIER_ISLAND',
    Overseas: 'OVERSEAS',
    Other: 'OTHER'
} as const;
export type HouseholdLocationEnum = typeof HouseholdLocationEnum[keyof typeof HouseholdLocationEnum];

/**
 * @export
 */
export const HouseholdSpaceHeatingEnum = {
    Wood: 'WOOD',
    Gas: 'GAS',
    Lpg: 'LPG',
    ElectricResistance: 'ELECTRIC_RESISTANCE',
    ElectricHeatPump: 'ELECTRIC_HEAT_PUMP',
    DontKnow: 'DONT_KNOW'
} as const;
export type HouseholdSpaceHeatingEnum = typeof HouseholdSpaceHeatingEnum[keyof typeof HouseholdSpaceHeatingEnum];

/**
 * @export
 */
export const HouseholdWaterHeatingEnum = {
    Gas: 'GAS',
    Lpg: 'LPG',
    ElectricResistance: 'ELECTRIC_RESISTANCE',
    ElectricHeatPump: 'ELECTRIC_HEAT_PUMP',
    Solar: 'SOLAR',
    DontKnow: 'DONT_KNOW'
} as const;
export type HouseholdWaterHeatingEnum = typeof HouseholdWaterHeatingEnum[keyof typeof HouseholdWaterHeatingEnum];

/**
 * @export
 */
export const HouseholdCooktopEnum = {
    Gas: 'GAS',
    Lpg: 'LPG',
    ElectricResistance: 'ELECTRIC_RESISTANCE',
    ElectricHeatPump: 'ELECTRIC_HEAT_PUMP',
    DontKnow: 'DONT_KNOW'
} as const;
export type HouseholdCooktopEnum = typeof HouseholdCooktopEnum[keyof typeof HouseholdCooktopEnum];


/**
 * Check if a given object implements the Household interface.
 */
export function instanceOfHousehold(value: object): value is Household {
    return true;
}

export function HouseholdFromJSON(json: any): Household {
    return HouseholdFromJSONTyped(json, false);
}

export function HouseholdFromJSONTyped(json: any, ignoreDiscriminator: boolean): Household {
    if (json == null) {
        return json;
    }
    return {
        
        'location': json['location'] == null ? undefined : json['location'],
        'occupancy': json['occupancy'] == null ? undefined : json['occupancy'],
        'spaceHeating': json['spaceHeating'] == null ? undefined : json['spaceHeating'],
        'waterHeating': json['waterHeating'] == null ? undefined : json['waterHeating'],
        'cooktop': json['cooktop'] == null ? undefined : json['cooktop'],
        'vehicles': json['vehicles'] == null ? undefined : ((json['vehicles'] as Array<any>).map(VehicleFromJSON)),
        'solar': json['solar'] == null ? undefined : SolarFromJSON(json['solar']),
        'battery': json['battery'] == null ? undefined : BatteryFromJSON(json['battery']),
    };
}

export function HouseholdToJSON(value?: Household | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'location': value['location'],
        'occupancy': value['occupancy'],
        'spaceHeating': value['spaceHeating'],
        'waterHeating': value['waterHeating'],
        'cooktop': value['cooktop'],
        'vehicles': value['vehicles'] == null ? undefined : ((value['vehicles'] as Array<any>).map(VehicleToJSON)),
        'solar': SolarToJSON(value['solar']),
        'battery': BatteryToJSON(value['battery']),
    };
}

